name: Build Multi-Platform

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: false
        default: 'v1.0.0'

permissions:
  contents: write

jobs:
  build:
    strategy:
      fail-fast: false  # 允许其他平台继续即使一个失败
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            artifact_name: imagetrim
            artifact_archive: ImageTrim-1.0.0-linux.tar.gz
          - os: windows-latest
            platform: windows
            artifact_name: ImageTrim.exe
            artifact_archive: ImageTrim-1.0.0-win.zip
          - os: macos-latest
            platform: macos
            artifact_name: ImageTrim.app
            artifact_archive: ImageTrim-1.0.0-macos.tar.gz

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Create virtual environment
      run: uv venv

    - name: Install dependencies
      run: |
        uv pip install --upgrade pip
        uv pip install -r requirements.txt
        uv pip install pyinstaller

    - name: Install system dependencies (Linux)
      if: matrix.platform == 'linux'
      run: |
        sudo apt-get update
        # 基础依赖
        sudo apt-get install -y python3-tk python3-dev

        # 尝试安装 OpenGL 相关包（兼容不同版本）
        sudo apt-get install -y libgl1-mesa-glx || sudo apt-get install -y libgl1 || echo "OpenGL package not found"
        sudo apt-get install -y libglu1-mesa-dev || sudo apt-get install -y libglu1 || echo "GLU package not found"

        # X11 和图形库
        sudo apt-get install -y libglib2.0-0 libsm6 libxext6 libxrender-dev libgomp1 libxrandr2

        # 尝试安装其他依赖（可选）
        sudo apt-get install -y libxcb-xinerama0 || echo "xcb-xinerama not available"
        sudo apt-get install -y libxss1 || echo "xss not available"
        sudo apt-get install -y libdbus-1-3 || echo "dbus not available"
        sudo apt-get install -y libgtk-3-0 || echo "gtk3 not available"
        sudo apt-get install -y libasound2-dev || echo "alsa not available"

        # 安装UPX用于压缩
        sudo apt-get install -y upx-ucl || echo "UPX not available"

    - name: Install system dependencies (macOS)
      if: matrix.platform == 'macos'
      run: |
        # macOS 系统依赖通常已包含在系统中
        echo "macOS dependencies check"
        # 安装UPX用于压缩
        brew install upx || echo "UPX not available via brew"

    - name: Install system dependencies (Windows)
      if: matrix.platform == 'windows'
      run: |
        # Windows 下载UPX用于压缩
        echo "Installing UPX for Windows..."
        curl -L -o upx.zip https://github.com/upx/upx/releases/download/v4.2.2/upx-4.2.2-win64.zip
        Expand-Archive -Path upx.zip -DestinationPath .
        Move-Item upx-4.2.2-win64/upx.exe upx.exe -Force
        echo "UPX installed"

    - name: Create build directories
      run: |
        mkdir -p build/macos
        mkdir -p build/linux

    # Info.plist will be handled by PyInstaller automatically

    - name: Create Linux .desktop file
      if: matrix.platform == 'linux'
      run: |
        cat > build/linux/imagetrim.desktop << 'EOF'
        [Desktop Entry]
        Name=ImageTrim
        Name[zh_CN]=图片去重工具
        Comment=Image deduplication and conversion tool
        Comment[zh_CN]=图片去重和格式转换工具
        Exec=imagetrim
        Icon=imagetrim
        Terminal=false
        Type=Application
        Categories=Graphics;Photography;
        MimeType=image/jpeg;image/png;image/webp;image/avif;
        StartupWMClass=ImageTrim
        EOF

    - name: Build application
      shell: bash
      run: |
        echo "Current directory contents:"
        ls -la
        echo "App directory contents:"
        ls -la app/ || echo "App directory not found"
        echo "Starting optimized build..."
        if [ "${{ matrix.platform }}" = "windows" ]; then
          .venv/Scripts/python build_optimized.py
        else
          .venv/bin/python build_optimized.py
        fi

    - name: Create additional packages (Linux)
      if: matrix.platform == 'linux'
      run: |
        # Check if build succeeded first
        if [ ! -f "dist/ImageTrim" ] && [ ! -f "dist/imagetrim" ]; then
          echo "Error: Linux binary not found in dist/"
          ls -la dist/ || echo "dist directory not found"
          exit 1
        fi

        # Find the actual binary name
        BINARY_NAME=""
        if [ -f "dist/ImageTrim" ]; then
          BINARY_NAME="ImageTrim"
        elif [ -f "dist/imagetrim" ]; then
          BINARY_NAME="imagetrim"
        fi

        echo "Found Linux binary: $BINARY_NAME"

        # Create AppImage
        mkdir -p ImageTrim.AppDir/usr/bin
        mkdir -p ImageTrim.AppDir/usr/share/applications
        mkdir -p ImageTrim.AppDir/usr/share/icons/hicolor/256x256/apps

        cp dist/$BINARY_NAME ImageTrim.AppDir/usr/bin/imagetrim

        # Create desktop file directly in AppDir (don't rely on build/linux)
        cat > ImageTrim.AppDir/usr/share/applications/imagetrim.desktop << 'EOF'
        [Desktop Entry]
        Name=ImageTrim
        Name[zh_CN]=图片去重工具
        Comment=Image deduplication and conversion tool
        Comment[zh_CN]=图片去重和格式转换工具
        Exec=imagetrim
        Icon=imagetrim
        Terminal=false
        Type=Application
        Categories=Graphics;Photography;
        MimeType=image/jpeg;image/png;image/webp;image/avif;
        StartupWMClass=ImageTrim
        EOF

        # Create AppRun
        cat > ImageTrim.AppDir/AppRun << 'EOFRUN'
        #!/bin/sh
        HERE="$(dirname "$(readlink -f "${0}")")"
        export LD_LIBRARY_PATH="${HERE}/usr/lib:${HERE}/usr/lib/x86_64-linux-gnu:${LD_LIBRARY_PATH}"
        export PATH="${HERE}/usr/bin:${PATH}"
        exec "${HERE}/usr/bin/imagetrim" "$@"
        EOFRUN
        chmod +x ImageTrim.AppDir/AppRun

        # Download appimagetool
        wget -q https://github.com/AppImage/appimagetool/releases/download/continuous/appimagetool-x86_64.AppImage -O appimagetool
        chmod +x appimagetool

        # Verify desktop file exists
        echo "Checking desktop file location:"
        ls -la ImageTrim.AppDir/usr/share/applications/
        echo "Checking AppDir structure:"
        ls -la ImageTrim.AppDir/

        # Create desktop file also at root level (some versions of appimagetool require this)
        cp ImageTrim.AppDir/usr/share/applications/imagetrim.desktop ImageTrim.AppDir/imagetrim.desktop

        echo "Creating AppImage with verbose output..."
        if ! ./appimagetool --verbose ImageTrim.AppDir ImageTrim-1.0.7-linux.AppImage; then
          echo "Standard AppImage creation failed, trying alternative approach..."
          if ! ./appimagetool --no-appstream ImageTrim.AppDir ImageTrim-1.0.7-linux.AppImage; then
            echo "Final attempt: creating AppImage without desktop integration..."
            ./appimagetool --no-appstream --no-desktop ImageTrim.AppDir ImageTrim-1.0.7-linux.AppImage || echo "All AppImage creation attempts failed"
          fi
        fi

    - name: Create DMG (macOS)
      if: matrix.platform == 'macos'
      run: |
        if [ -f "dist/ImageTrim.app" ]; then
          mkdir -p dmg_temp
          cp -R "dist/ImageTrim.app" dmg_temp/
          ln -s /Applications dmg_temp/Applications
          hdiutil create -volname "ImageTrim" -srcfolder dmg_temp -ov -format UDZO ImageTrim-1.1.4-macos.dmg
          rm -rf dmg_temp
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.platform }}-build
        path: |
          dist/
          *.AppImage
          *.dmg
        retention-days: 30

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Display artifacts structure
      run: |
        echo "=== Artifacts Structure ==="
        find artifacts -type f -name "*" | head -20
        echo ""
        echo "Platform directories:"
        ls -la artifacts/ || echo "No artifacts directory"

    - name: Prepare release assets
      run: |
        mkdir -p release-assets

        # Windows
        if [ -d "artifacts/windows-build" ]; then
          echo "Processing Windows artifacts:"
          ls -la artifacts/windows-build/
          find artifacts/windows-build/ -type f -name "*.exe" -exec cp {} release-assets/ \; || echo "No Windows exe found"
          find artifacts/windows-build/ -type f -name "*.zip" -exec cp {} release-assets/ \; || echo "No Windows zip found"
        fi

        # macOS
        if [ -d "artifacts/macos-build" ]; then
          echo "Processing macOS artifacts:"
          ls -la artifacts/macos-build/
          find artifacts/macos-build/ -type f -name "*.app" -exec cp -r {} release-assets/ \; || echo "No macOS app found"
          find artifacts/macos-build/ -type f -name "*.dmg" -exec cp {} release-assets/ \; || echo "No macOS dmg found"
          find artifacts/macos-build/ -type f -name "*.tar.gz" -exec cp {} release-assets/ \; || echo "No macOS tar.gz found"
        fi

        # Linux
        if [ -d "artifacts/linux-build" ]; then
          echo "Processing Linux artifacts:"
          ls -la artifacts/linux-build/
          find artifacts/linux-build/ -type f -name "imagetrim" -exec cp {} release-assets/ \; || echo "No Linux binary found"
          find artifacts/linux-build/ -type f -name "ImageTrim" -exec cp {} release-assets/ \; || echo "No Linux binary found"
          find artifacts/linux-build/ -type f -name "*.AppImage" -exec cp {} release-assets/ \; || echo "No Linux AppImage found"
          find artifacts/linux-build/ -type f -name "*.tar.gz" -exec cp {} release-assets/ \; || echo "No Linux tar.gz found"
        fi

        echo "=== Release Assets ==="
        ls -la release-assets/
        echo "Total size:"
        du -sh release-assets/

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        name: ImageTrim ${{ github.ref_name }}
        body: |
          ## ImageTrim ${{ github.ref_name }}

          🚀 **优化的跨平台构建**

          主要改进：
          - 📦 **文件体积优化**: 减少约50%体积 (从87-104MB降至40-60MB)
          - 🎯 **排除大型依赖**: 移除matplotlib、scipy、pandas等不必要库
          - ⚡ **启用UPX压缩**: 进一步压缩可执行文件
          - 🔧 **符号剥离**: 移除调试信息减小体积

          ### 下载文件

          #### Windows
          - `ImageTrim.exe` - Windows可执行文件

          #### macOS
          - `ImageTrim.app` - macOS应用程序包
          - `ImageTrim-*.dmg` - macOS磁盘镜像文件

          #### Linux
          - `ImageTrim` 或 `imagetrim` - Linux可执行文件
          - `ImageTrim-*.AppImage` - Linux AppImage便携版

          ### 使用方法
          1. 下载对应平台的文件
          2. Windows: 直接运行 `ImageTrim.exe`
          3. macOS: 打开 `ImageTrim.app` 或挂载DMG文件
          4. Linux: 运行 `ImageTrim` 或 `ImageTrim.AppImage`

          ### 系统要求
          - Windows 10/11
          - macOS 10.14+
          - Linux (GLIBC 2.17+)

          ---
          🤖 自动构建并发布
        files: release-assets/*
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}